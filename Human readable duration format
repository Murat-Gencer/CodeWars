Your task in order to complete this Kata is to write a function which formats a duration, given as a number of seconds, in a human-friendly way.

The function must accept a non-negative integer. If it is zero, it just returns "now". Otherwise, the duration is expressed as a combination of years, days, hours, minutes and seconds.

It is much easier to understand with an example:

* For seconds = 62, your function should return 
    "1 minute and 2 seconds"
* For seconds = 3662, your function should return
    "1 hour, 1 minute and 2 seconds"
For the purpose of this Kata, a year is 365 days and a day is 24 hours.

Note that spaces are important.

Detailed rules
The resulting expression is made of components like 4 seconds, 1 year, etc. In general, a positive integer and one of the valid units of time, separated by a space. The unit of time is used in plural if the integer is greater than 1.

The components are separated by a comma and a space (", "). Except the last component, which is separated by " and ", just like it would be written in English.

A more significant units of time will occur before than a least significant one. Therefore, 1 second and 1 year is not correct, but 1 year and 1 second is.

Different components have different unit of times. So there is not repeated units like in 5 seconds and 1 second.

A component will not appear at all if its value happens to be zero. Hence, 1 minute and 0 seconds is not valid, but it should be just 1 minute.

A unit of time must be used "as much as possible". It means that the function should not return 61 seconds, but 1 minute and 1 second instead. Formally, the duration specified by of a component must not be greater than any valid more significant unit of time.

#include <string>
using namespace std;
string format_duration(int seconds) { 
  string time;    
  string sonuncu , birinci="seconds";    
  int year = 0, day = 0, hour = 0, minute = 0;
    
  if (seconds == 0){
    time = "now";
    return time;
  }
    
  year = seconds / (365 * 24 * 60 * 60);
  seconds -= year * (365 * 24 * 60 * 60);
  sonuncu="year";
  if(year > 0)
      birinci="year";
    
  day = seconds / (24 * 60 * 60);
  seconds -= day * (24 * 60 * 60);
  if(day > 0 ) {
    sonuncu="day";
    if(year == 0)
      birinci="day";
      
    }
  
  hour = seconds / (3600);
  seconds -= hour * 3600;
  if(hour > 0){
    sonuncu="hour";
    if(year == 0 && day == 0) 
        birinci="hour";
  }
    
  minute = seconds / 60;
  seconds -= minute * 60;
  if(minute > 0 ){
    sonuncu="minute";
    if(year == 0 && day == 0 && hour == 0) 
      birinci="minute";
  }
  
  if(seconds >0)
    sonuncu="seconds";

  if(year  > 0){
    if(year == 1)
      time+=to_string(year) + " year";
    else
      time+=to_string(year) + " years";
   if(sonuncu.compare("year") != 0 && !(sonuncu.compare("day") == 0)){
      time+=", ";
    }    
  }
  
  if(day  > 0){
    if(sonuncu.compare("day") == 0 && birinci.compare("day")!=0){
      time+=" and ";
    }
    if(day == 1)
      time+=to_string(day) + " day";
    else
      time+=to_string(day) + " days";
    if(sonuncu.compare("day") != 0 && ! (sonuncu.compare("hour") == 0)){
      time+=", ";
    }
  }    
  
  if(hour  > 0){
    if(sonuncu.compare("hour") == 0 && birinci.compare("hour") != 0 ){
      time+=" and ";
    }
    if(hour == 1)
      time+=to_string(hour) + " hour";
    else
      time+=to_string(hour) + " hours";
     if(sonuncu.compare("hour") != 0 && !(sonuncu.compare( "minute") == 0 )){
      time+=", ";
    }    
  }
  
  if(minute  > 0){
    if(sonuncu.compare( "minute") == 0 && birinci.compare("minute")!=0){
      time+=" and ";
    }
    if(minute == 1)
      time+=to_string(minute) + " minute";
    else
      time+=to_string(minute) + " minutes";
    printf("%d %s",sonuncu.compare("seconds"),sonuncu.c_str() );
  }
  
  if(seconds  > 0){
    if(sonuncu.compare("seconds") == 0 && birinci.compare("seconds")!=0)
      time+=" and "; 
    if(seconds == 1)
      time+=to_string(seconds) + " second";
    else
      time+=to_string(seconds) + " seconds";
  }
  
  return time;
}
